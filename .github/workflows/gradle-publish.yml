# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle Package

on:
  push:
    branches:
      - main
#   release:
#     types: [created]

jobs:
  build:

    runs-on: ubuntu-latest
    #     permissions:
    #       contents: read
    #       packages: write

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      #         server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
      #         settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}

      - name: build and release to DockerHub
        env:
          NAME: infomuscle10 # 계정 명
          REPO: bokeunjeong-spring # 레포 이름
        run: |
          docker build -t $NAME/$REPO .
          docker push $NAME/$REPO:latest
  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, label-development ]
    steps:
      - name: Docker run
        run: |
          sudo docker ps -q --filter "name=bokeunjeong-spring" | grep -q . && sudo docker stop "bokeunjeong-spring" && sudo docker rmi "infomuscle10/bokeunjeong-spring"
          sudo docker run -d --rm -p 8080:8080 --name bokeunjeong-spring -e "SPRING_PROFILES_ACTIVE=prod" -v /var/lib/docker/volumes/bokeunjeong-spring/_data:/tmp --network aws-network infomuscle10/bokeunjeong-spring

    # The USERNAME and TOKEN need to correspond to the credentials environment variables used in
    # the publishing section of your build.gradle
#    - name: Publish to GitHub Packages
#      run: gradle publish
#      env:
#        USERNAME: ${{ github.actor }}
#        TOKEN: ${{ secrets.GITHUB_TOKEN }}
